{!variables}
basePackage=com.example.demo
queueName=demo.queue
exchangeName=demo.exchange
routingKey=demo.routing
dlqName=demo.dlq
dlxName=demo.dlx
{end_variables}

{!file}src/main/java/{!basePackage}/config/RabbitMQConfig.java{end_file}
package {!basePackage}.config;

import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitMQConfig {

    @Bean
    public Queue mainQueue() {
        return QueueBuilder.durable("{!queueName}")
                .withArgument("x-dead-letter-exchange", "{!dlxName}")
                .withArgument("x-dead-letter-routing-key", "{!dlqName}")
                .build();
    }

    @Bean
    public Queue deadLetterQueue() {
        return QueueBuilder.durable("{!dlqName}").build();
    }

    @Bean
    public DirectExchange exchange() {
        return new DirectExchange("{!exchangeName}");
    }

    @Bean
    public DirectExchange deadLetterExchange() {
        return new DirectExchange("{!dlxName}");
    }

    @Bean
    public Binding binding(Queue mainQueue, DirectExchange exchange) {
        return BindingBuilder
                .bind(mainQueue)
                .to(exchange)
                .with("{!routingKey}");
    }

    @Bean
    public Binding dlqBinding(Queue deadLetterQueue, DirectExchange deadLetterExchange) {
        return BindingBuilder
                .bind(deadLetterQueue)
                .to(deadLetterExchange)
                .with("{!dlqName}");
    }

    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setMessageConverter(messageConverter());
        return rabbitTemplate;
    }

    @Bean
    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(
            ConnectionFactory connectionFactory) {
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
        factory.setMessageConverter(messageConverter());
        factory.setPrefetchCount(1);
        factory.setDefaultRequeueRejected(false);
        return factory;
    }

    @Bean
    public Jackson2JsonMessageConverter messageConverter() {
        return new Jackson2JsonMessageConverter();
    }
}

{!file}src/main/java/{!basePackage}/service/MessageProducer.java{end_file}
package {!basePackage}.service;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class MessageProducer {

    private final RabbitTemplate rabbitTemplate;
    
    @Value("${!exchangeName}")
    private String exchange;
    
    @Value("${!routingKey}")
    private String routingKey;

    public MessageProducer(RabbitTemplate rabbitTemplate) {
        this.rabbitTemplate = rabbitTemplate;
    }

    public void sendMessage(Object message) {
        rabbitTemplate.convertAndSend(exchange, routingKey, message);
    }

    public void sendMessageWithTTL(Object message, long ttl) {
        rabbitTemplate.convertAndSend(exchange, routingKey, message, m -> {
            m.getMessageProperties().setExpiration(String.valueOf(ttl));
            return m;
        });
    }
}

{!file}src/main/java/{!basePackage}/service/MessageConsumer.java{end_file}
package {!basePackage}.service;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class MessageConsumer {

    private static final Logger logger = LoggerFactory.getLogger(MessageConsumer.class);

    @RabbitListener(queues = "${!queueName}")
    public void receiveMessage(Object message) {
        try {
            processMessage(message);
        } catch (Exception e) {
            logger.error("Error processing message: {}", message, e);
            throw e; // Message will be sent to DLQ
        }
    }

    @RabbitListener(queues = "${!dlqName}")
    public void processDLQ(Object message) {
        logger.warn("Processing message from DLQ: {}", message);
        // Implement DLQ handling logic
    }

    private void processMessage(Object message) {
        // Implement message processing logic
        logger.info("Processing message: {}", message);
    }
}

{!file}src/main/resources/application.properties{end_file}
# RabbitMQ Configuration
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}
spring.rabbitmq.listener.simple.retry.enabled=true
spring.rabbitmq.listener.simple.retry.initial-interval=1000
spring.rabbitmq.listener.simple.retry.max-attempts=3
spring.rabbitmq.listener.simple.retry.multiplier=2.0
spring.rabbitmq.listener.simple.retry.max-interval=10000

{!file}docker-compose.yml{end_file}
version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - spring-rabbitmq

volumes:
  rabbitmq-data:

networks:
  spring-rabbitmq:
    driver: bridge

{!file}build.gradle{end_file}
plugins {
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = '{!basePackage}'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    layered {
        enabled = true
    }
}
