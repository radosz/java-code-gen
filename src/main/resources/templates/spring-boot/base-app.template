{!questions}
projectName=What is your project name (e.g., my-spring-app)?
basePackage=What is your base package name (e.g., com.example.demo)?
description=Project description:
{end_questions}

{!file}build.gradle{end_file}
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example.demo'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

{!file}src/main/java/com\\/example\\/demo/Application.java{end_file}
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

{!file}src/main/java/com\\/example\\/demo/controller/HelloController.java{end_file}
package com.example.demo.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.Map;

@RestController
public class HelloController {
    
    @GetMapping("/")
    public Map<String, String> hello() {
        return Map.of(
            "message", "Welcome to my-spring-app!",
            "status", "UP"
        );
    }
}

{!file}src/main/resources/application.yml{end_file}
spring:
  application:
    name: my-spring-app

server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics

{!file}Dockerfile{end_file}
FROM eclipse-temurin:17-jdk-alpine as build
WORKDIR /workspace/app

COPY gradlew .
COPY gradle gradle
COPY build.gradle .
COPY src src

RUN ./gradlew build -x test
RUN mkdir -p build/dependency && (cd build/dependency; jar -xf ../libs/*.jar)

FROM eclipse-temurin:17-jre-alpine
VOLUME /tmp
ARG DEPENDENCY=/workspace/app/build/dependency
COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib
COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF
COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app
ENTRYPOINT ["java","-cp","app:app/lib/*","com.example.demo.Application"]

{!file}docker-compose.yml{end_file}
version: '3.8'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev

{!file}.gitignore{end_file}
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### VS Code ###
.vscode/

{!file}README.md{end_file}
# my-spring-app

kyp

## Getting Started

This is a Spring Boot application that provides a basic setup with:
- REST API
- Actuator endpoints for monitoring
- Docker support
- Gradle build system

### Prerequisites
- Java 17+
- Gradle 8.x
- Docker (optional)

### Building the application
```bash
./gradlew build
```

### Running the application
```bash
./gradlew bootRun
```

### Running with Docker
```bash
docker-compose up --build
```

## API Endpoints
- GET `/` - Welcome message
- GET `/actuator/health` - Health check
- GET `/actuator/info` - Application info

