{!questions}
projectName=What is your project name (e.g., express-app)?
basePackage=What is your base package name (e.g., com.example.app)?
description=Project description (press enter for default):An Express.js web application with basic structure and configuration.
{end_questions}

{!file}package.json{end_file}
{
  "name": "{!basePackage}",
  "version": "1.0.0",
  "description": "{!description}",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "test": "jest",
    "lint": "eslint .",
    "format": "prettier --write ."
  },
  "dependencies": {
    "express": "^4.18.2",
    "dotenv": "^16.4.1",
    "cors": "^2.8.5",
    "helmet": "^7.1.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.3",
    "jest": "^29.7.0",
    "supertest": "^6.3.4",
    "eslint": "^8.56.0",
    "prettier": "^3.2.4"
  }
}

{!file}src/index.js{end_file}
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Routes
app.get('/', (req, res) => {
  res.json({ message: 'Welcome to Express API' });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

module.exports = app;

{!file}src/routes/health.js{end_file}
const express = require('express');
const router = express.Router();

router.get('/', (req, res) => {
  res.json({ status: 'healthy' });
});

module.exports = router;

{!file}src/routes/home.js{end_file}
const express = require('express');
const router = express.Router();

router.get('/', (req, res) => {
  res.json({ message: 'Welcome to Express API' });
});

module.exports = router;

{!file}src/tests/health.test.js{end_file}
const request = require('supertest');
const app = require('../index');

describe('Health Check Endpoint', () => {
  it('should return healthy status', async () => {
    const response = await request(app).get('/health');
    expect(response.statusCode).toBe(200);
    expect(response.body).toHaveProperty('status', 'healthy');
  });
});

{!file}.env{end_file}
PORT=3000
NODE_ENV=development

{!file}.gitignore{end_file}
# Dependencies
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log

# Environment variables
.env
.env.local
.env.*.local

# Build output
dist/
build/

# Coverage directory
coverage/

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

{!file}README.md{end_file}
# {!projectName}

{!description}

## Project Structure
```
src/
├── index.js           # Application entry point
├── routes/           # Route handlers
│   ├── health.js
│   └── home.js
└── tests/           # Test files
    └── health.test.js
```

## Prerequisites

- Node.js 18 or later
- npm or yarn

## Setup

1. Install dependencies:
```bash
npm install
# or
yarn install
```

2. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your configuration
```

## Running the Application

Development mode:
```bash
npm run dev
# or
yarn dev
```

Production mode:
```bash
npm start
# or
yarn start
```

## Testing

Run tests:
```bash
npm test
# or
yarn test
```

## API Endpoints

- `GET /`: Welcome message
- `GET /health`: Health check endpoint

## Code Style

Format code:
```bash
npm run format
# or
yarn format
```

Check code style:
```bash
npm run lint
# or
yarn lint
``` 