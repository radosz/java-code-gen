{!questions}
projectName=What is your project name (e.g., gin-app)?
basePackage=What is your base package name (e.g., com.example.app)?
description=Project description (press enter for default):A Gin web application with basic structure and configuration.
{end_questions}

{!file}go.mod{end_file}
module {!basePackage}

go 1.21

require (
	github.com/gin-gonic/gin v1.9.1
	github.com/joho/godotenv v1.5.1
	github.com/stretchr/testify v1.8.4
)

{!file}src/{!basePackage}/main.go{end_file}
package main

import (
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"log"
	"os"
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: .env file not found")
	}

	r := gin.Default()
	setupRoutes(r)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	if err := r.Run(":" + port); err != nil {
		log.Fatal(err)
	}
}

func setupRoutes(r *gin.Engine) {
	r.GET("/", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "Welcome to Gin API",
		})
	})

	r.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status": "healthy",
		})
	})
}

{!file}src/{!basePackage}/handlers/health.go{end_file}
package handlers

import (
	"github.com/gin-gonic/gin"
)

func HealthCheck(c *gin.Context) {
	c.JSON(200, gin.H{
		"status": "healthy",
	})
}

{!file}src/{!basePackage}/handlers/home.go{end_file}
package handlers

import (
	"github.com/gin-gonic/gin"
)

func Home(c *gin.Context) {
	c.JSON(200, gin.H{
		"message": "Welcome to Gin API",
	})
}

{!file}src/{!basePackage}/tests/health_test.go{end_file}
package tests

import (
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestHealthCheck(t *testing.T) {
	r := gin.Default()
	r.GET("/health", handlers.HealthCheck)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/health", nil)
	r.ServeHTTP(w, req)

	assert.Equal(t, 200, w.Code)
	assert.Contains(t, w.Body.String(), "healthy")
}

{!file}.env{end_file}
PORT=8080
GIN_MODE=debug

{!file}.gitignore{end_file}
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories to remove from the version control repo.
vendor/

# Go workspace file
go.work

# Environment variables
.env

# IDE
.idea/
.vscode/
*.swp
*.swo

{!file}README.md{end_file}
# {!projectName}

{!description}

## Project Structure
```
src/
└── {!basePackage}/
    ├── main.go           # Application entry point
    ├── handlers/         # Request handlers
    │   ├── health.go
    │   └── home.go
    └── tests/           # Test files
        └── health_test.go
```

## Prerequisites

- Go 1.21 or later
- Make (optional, for using Makefile commands)

## Setup

1. Install dependencies:
```bash
go mod download
```

2. Set up environment variables:
```bash
cp .env.example .env
# Edit .env with your configuration
```

## Running the Application

Development mode:
```bash
go run src/{!basePackage}/main.go
```

Production mode:
```bash
GIN_MODE=release go run src/{!basePackage}/main.go
```

## Testing

Run tests:
```bash
go test ./...
```

## API Endpoints

- `GET /`: Welcome message
- `GET /health`: Health check endpoint

## Code Style

Format code:
```bash
go fmt ./...
```

Check code style:
```bash
golangci-lint run
``` 