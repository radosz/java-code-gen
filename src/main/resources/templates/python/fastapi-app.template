{!questions}
projectName=What is your project name (e.g., fastapi-app)?
basePackage=What is your base package name (e.g., com.example.app)?
description=Project description (press enter for default):A FastAPI application with async support, dependency injection, and OpenAPI documentation.
{end_questions}

{!file}requirements.txt{end_file}
fastapi>=0.109.0
uvicorn>=0.27.0
pydantic>=2.5.0
python-dotenv>=1.0.0
sqlalchemy>=2.0.25
alembic>=1.13.0
pytest>=7.4.0
httpx>=0.26.0
python-jose>=3.3.0
passlib>=1.7.4
bcrypt>=4.1.0

{!file}src/main.py{end_file}
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .routers import health, users
from .core.config import settings

app = FastAPI(
    title="{!projectName}",
    description="{!description}",
    version="1.0.0"
)

# CORS middleware configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(health.router, tags=["health"])
app.include_router(users.router, prefix="/api/users", tags=["users"])

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)

{!file}src/core/config.py{end_file}
from pydantic_settings import BaseSettings
from typing import List

class Settings(BaseSettings):
    PROJECT_NAME: str = "{!projectName}"
    CORS_ORIGINS: List[str] = ["http://localhost:3000"]
    DATABASE_URL: str = "sqlite:///./app.db"
    SECRET_KEY: str = "your-secret-key"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    class Config:
        env_file = ".env"

settings = Settings()

{!file}src/routers/health.py{end_file}
from fastapi import APIRouter
from datetime import datetime

router = APIRouter()

@router.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow()
    }

{!file}src/routers/users.py{end_file}
from fastapi import APIRouter, Depends, HTTPException, status
from ..schemas.user import UserCreate, UserResponse
from ..services.auth import get_current_user
from typing import List

router = APIRouter()

@router.post("/", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
async def create_user(user: UserCreate):
    return {"id": 1, "email": user.email}

@router.get("/me", response_model=UserResponse)
async def get_current_user_info(current_user = Depends(get_current_user)):
    return current_user

{!file}src/schemas/user.py{end_file}
from pydantic import BaseModel, EmailStr

class UserBase(BaseModel):
    email: EmailStr

class UserCreate(UserBase):
    password: str

class UserResponse(UserBase):
    id: int

    class Config:
        from_attributes = True

{!file}src/services/auth.py{end_file}
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from ..core.config import settings
from datetime import datetime, timedelta

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
        return {"id": int(user_id), "email": payload.get("email")}
    except JWTError:
        raise credentials_exception

{!file}tests/test_health.py{end_file}
from fastapi.testclient import TestClient
from src.main import app

client = TestClient(app)

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json()["status"] == "healthy"

{!file}Dockerfile{end_file}
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ src/
COPY tests/ tests/

CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]

{!file}README.md{end_file}
# {!projectName}

{!description}

## Features

- FastAPI with async support
- Dependency Injection
- OpenAPI documentation
- JWT Authentication
- SQLAlchemy integration
- Testing with pytest
- Docker support

## Installation

1. Clone the repository
2. Create a virtual environment:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```
3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

## Running the Application

Development:
```bash
uvicorn src.main:app --reload
```

Production:
```bash
uvicorn src.main:app
```

## API Documentation

- OpenAPI documentation: http://localhost:8000/docs
- ReDoc documentation: http://localhost:8000/redoc

## Testing

```bash
pytest
```

## Docker

Build and run with Docker:
```bash
docker build -t {!projectName} .
docker run -p 8000:8000 {!projectName}
```

